int Solution::maxArea(vector<int> &h) {
    int n=h.size();
    int l=0,r=n-1,ans=0;
    while(l<r){
        int height= min(h[l],h[r]);
        ans=max(ans,(r-l)*height);
        while(h[l]<=height){
            l++;
        }
        while(h[r]<=height){
            r--;
        }
    }
    return ans;
}
/*Start by evaluating the widest container, using the first and the last line. 
All other possible containers are less wide, so to hold more water, they need 
to be higher. Thus, after evaluating that widest container, skip lines at 
both ends that don't support a higher height. Then evaluate that new 
container we arrived at. Repeat until there are no more possible containers left.*/
