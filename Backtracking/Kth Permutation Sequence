// brute force approach
 void calc(vector<string>&ans,int ind,string s){
        if(ind==s.size()){
            ans.push_back(s);
        }
        for(int i=ind;i<s.size();i++){
            swap(s[i],s[ind]);
            calc(ans,ind+1,s);
            swap(s[i],s[ind]);
        }
    }
    string getPermutation(int n, int k) {
        string s="";
        for(int i=1;i<=n;i++){
            s+= to_string(i);
        }
        vector<string>ans;
        calc(ans,0,s);
        sort(ans.begin(),ans.end());
        return ans[k-1];
    }
    O(n!)*log(n!);
     optimal solution below
 ** accepted on leetcode not on interviewbit
 string Solution::getPermutation(int n, int k) {
    string ans="";
    vector<int>nums;
    int fact=1;
    for(int i=1;i<n;i++){
        fact=fact*i;
        nums.push_back(i);
    }
    nums.push_back(n);
    k=k-1;
    
    while(true){
        ans+= to_string(nums[k/fact]);
        nums.erase(nums.begin()+ k/fact);
        if(nums.size()==0){
            break;
        }
        k= k%fact;
        fact= fact/nums.size();
    }
    return ans;
}
