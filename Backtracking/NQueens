// optimal solution using backtracking
void calc(vector<vector<string>>&ans, vector<string>&grid,int col, int n, vector<int>leftrow,
          vector<int>&lowerdiagonal,vector<int>&upperdiagonal){
              
              // base case
              if(col==n){
                  ans.push_back(grid);
                  return;
              }
              //code here
              for(int i=0;i<n;i++){
                  if(leftrow[i]==0 && lowerdiagonal[i+col]==0 
                  && upperdiagonal[n-1+col-i]==0){
                      
                    // code here
                    grid[i][col]='Q';
                    leftrow[i]=1;
                    lowerdiagonal[i+col]=1;
                    upperdiagonal[n-1+col-i]=1;
                    calc(ans,grid,col+1,n,leftrow,lowerdiagonal,upperdiagonal);
                    // backtrack
                    grid[i][col]='.';
                    leftrow[i]=0;
                    lowerdiagonal[i+col]=0;
                    upperdiagonal[n-1+col-i]=0;
                  }
              }
          }
vector<vector<string> > Solution::solveNQueens(int n) {
    vector<vector<string>>ans;
    vector<string> grid(n);
    string s(n,'.');
    for(int i=0;i<n;i++){
        grid[i]=s;
    }
    vector<int>leftrow(n,0),lowerdiagonal(2*n-1,0),upperdiagonal(2*n-1,0);
    calc(ans,grid,0,n,leftrow,lowerdiagonal,upperdiagonal);
    return ans;
}
// brute force code of striver_79
class Solution {
public:
    bool isSafe1(int row, int col, vector<string> board, int n) {
        // check upper diagonal
        int duprow = row;
        int dupcol = col; 
        
        while(row >= 0 && col >= 0) {
            if(board[row][col] == 'Q') return false;
            row--;
            col--;
        }
        
        
        col = dupcol; 
        row = duprow;
        while(col>=0) {
            if(board[row][col] == 'Q') return false;
            col--; 
        }
    
        row = duprow;
        col = dupcol; 
        while(row<n && col>=0) {
            if(board[row][col] == 'Q') return false;
            row++;
            col--; 
        }
        
        return true; 
    }
public: 
    void solve(int col, vector<string> &board, vector<vector<string>> &ans, int n) {
        if(col == n) {
            ans.push_back(board); 
            return; 
        }
    
        for(int row = 0;row<n;row++) {
            if(isSafe1(row, col, board, n)) {
                board[row][col] = 'Q'; 
                solve(col+1, board, ans, n); 
                board[row][col] = '.'; 
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans; 
        vector<string> board(n);
        string s(n, '.'); 
        for(int i = 0;i<n;i++) {
            board[i] = s; 
        }
         
        solve(0,board, ans, n); 
        return ans; 
    }
    
};

