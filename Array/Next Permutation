ALGORITHM
// intuition is from back even for length 1 also the permutation will be increasing
1. Traverse from back and find the first element such that a[i]<a[i+1] ind1;
if this step returns -1 then directly skip to step 4
2. Again traverse from back and find the first index such that a[ind2]>a[ind1]
3. swap(a[ind1],a[ind2])
4.reverse(ind+1,end)
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n=nums.size(),ind1,ind2;
        for(ind1=n-2;ind1>=0;ind1--){
            if(nums[ind1]<nums[ind1+1]){
                break;
            }
        }
        if(ind1<0){
            reverse(nums.begin(),nums.end());
        }
        else{
            for(ind2=n-1;ind2>ind1;ind2--){
                if(nums[ind2]>nums[ind1]){
                    break;
                }
            }
        }
        swap(nums[ind1],nums[ind2]);
        reverse(nums.begin()+ind1+1,nums.end());
    }
};
