Dutch National Flag algorithm
low ptr,mid ptr at start and high ptr at end
concept : [0 ... low-1] ---  0. all elements to left  of low pointer will be 0
          [high+1 .....n]----2. // all elements to right of high pointer will be 2 
          everything between [low,mid-1] all will be 1's
Technique :
if(a[mid]==0)  -- swap(a[low],a[mid]) low++, mid++;
if(a[mid]==1) --- mid++;
if(a[mid]==2) --- swap(a[mid],a[high]) high--;
while(mid<=high) // till mid doesnt crosses high pointer

sort --> O(nlogn) 
counting sort O(2*n)
this will give O(n) with constant space complexity
// code here

void sortColors(vector<int>& nums) {
        int n=nums.size();
        int low=0,mid=0,high=n-1;
        while(mid<=high){
            if(nums[mid]==0){
                swap(nums[mid],nums[low]);
                low++;
                mid++;
            }
            else if( nums[mid]==1){
                mid++;
            }
            else{
                swap(nums[high],nums[mid]);
                high--;
            }
        }
    }
