
approach 1

create an array of size arr n+1 and while traversing do  arr[val[i]]++
now traverse the array from 1 to n if(arr[i]==2 repeat and if arr[i]==0 missing).  TIME COMPLEXITY O(2*N);

approach 2
  
 vector<int> Solution::repeatedNumber(const vector<int> &A) {
    // missing-x;
    // repeated-y
    long long  n=A.size();
    long long int C= (n*(n+1))/2;
    long long int D= (n*(n+1)*(2*n+1))/6;
    for(int i=0;i<n;i++){
        long long int pro=(long long) A[i] * (long long )A[i];
        D-= pro;
        C-= A[i];
    }
    long long int divi= D/C;
    long long int  x= (divi + C)/2;
    long long int  y= (divi - C)/2;
    vector<int>ans;
    ans.push_back(y);
    ans.push_back(x);
    return ans;
}


approach 3. XOR method

vector<int> Solution::repeatedNumber(const vector<int> &arr) {
    int x=0,y=0; // x-> missing one and y-> repeated one
    vector<int>ans;
    int xor1=0;
    int n=arr.size();
    for(int i=0;i<n;i++){
        xor1= xor1^arr[i];
    }
    for(int i=1;i<=n;i++){
        xor1= xor1^(i);
    }
    // this will cancel xor of all elements except x and y
    int rsbit= xor1 & ~(xor1-1);  // right most set bit in xor1 will be either set in x or set in y
    // creating two different sets
    for(int i=0;i<n;i++){
        if((rsbit) & (arr[i])){
            x= x^arr[i];
        }
        else{
            y=y^arr[i];
        }
    }
    for(int i=1;i<=n;i++){
        if((rsbit) & (i)){
            x= x^i;
        }
        else{
            y=y^i;
        }
    }
    int flg=0;
    for(int i=0;i<n;i++){
        if(arr[i]==x){
            flg=1;
            break;
        }
    }
    if(flg){
        swap(x,y);
    }
    ans.push_back(y);
    ans.push_back(x);
    return ans;
    // O(5*n)
}
