/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool compart(Interval a1, Interval a2){ // struct cannot be sorted directly
    if(a1.start<a2.start){
        return true;
    }
    else{
        return false;
    }
}
vector<Interval> Solution::merge(vector<Interval> &A) {
    sort(A.begin(),A.end(),compart);
    vector<Interval>ans;
    Interval temp=A[0];
    for(int i=0;i<A.size();i++){
        if(A[i].start<=temp.end){
            temp.end=max(temp.end,A[i].end);
        }
        else{
            ans.push_back(temp);
            temp=A[i];
        }
    }
    ans.push_back(temp);
    return ans;
}
