/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool compart(Interval i1, Interval i2){
     if(i1.start<i2.start){
         return true;
     }
     else{
         return false;
     }
 }
vector<Interval> Solution::insert(vector<Interval> &in, Interval newInterval) {
    in.push_back(newInterval);
    sort(in.begin(),in.end(),compart);
    vector<Interval>ans;
    Interval temp=in[0];
    for(int i=0;i<in.size();i++){
        if(in[i].start<=temp.end){
            temp.end=max(temp.end,in[i].end);
        }
        else{
            ans.push_back(temp);
            temp=in[i];
        }
    }
    ans.push_back(temp);
    return ans;
}
