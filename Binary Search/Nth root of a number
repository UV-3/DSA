double multiply(double x, int n) { // this function is binary exponentiation
    double ans=1.0;
    long long nn=n;
    if(n<0){
        nn= -1*nn;
    }
    while(nn>0){
        if(nn%2==0){
            x=x*x;
            nn=nn/2;
        }
        else{
            ans= ans*x;
            nn--;
        }
    }
    if(n<0){
        ans= (double)(1.0)/(double)(ans);
    }
    return ans;
}
double getNthRoot(int n, int m) {
    double low = 1;
    double high = m;
    double eps = 1e-6;
    
    while((high - low) > eps) {
        double mid = (low + high) / 2.0;
        if(multiply(mid, n) < m) {
            low = mid;
        }
        else {
            high = mid;
        }
    }
    return high;
}
int Nthroot(int n, int m) {
    if(m==0){
        return 0;
    }
    double tot= getNthRoot(n,m);
    int ans= floor(tot);
    return ans;
}
