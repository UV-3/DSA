#include "bits/stdc++.h"
using namespace std;

struct Node {
    int data;
    Node *left;
    Node* right;
};

Node* FindMin(Node* root){
    while(root->left != NULL) root = root->left;
    return root;
}

Node* GetnewNode(int data){
    Node* newNode = new Node();
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

void inorder(Node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
Node* Insert(Node* root, int data){
    if(root==NULL){
        root=GetnewNode(data);
    }
    else if( data<= root->data){
        root->left=Insert(root->left,data);
    }
    else{
        root->right=Insert(root->right,data);
    }
    return root;
}
Node* Delete( Node *root, int data) {
    if(root == NULL) {
        return root;
    }
    else if(data < root->data) {
        root->left = Delete(root->left,data);
    }
    else if (data > root->data) {
        root->right = Delete(root->right,data);
    }
    // Wohoo... I found you, Get ready to be deleted
    else {
        // Case 1:  No child
        if(root->left == NULL && root->right == NULL) {
            delete root;
            root = NULL;
        }
        //Case 2: One child
        else if(root->left == NULL) {
            Node *temp = root;
            root = root->right;
            delete temp;
        }
        else if(root->right == NULL) {
            Node *temp = root;
            root = root->left;
            delete temp;
        }
        // case 3: 2 children
        else {
            Node *temp = FindMin(root->right);
            root->data = temp->data;
            root->right = Delete(root->right,temp->data);
        }
    }
    return root;
}
int main() {
    /*Code To Test the logic
      Creating an example tree
                5
               / \
              3   10
             / \   \
            1   4   11
    */
    Node* root = NULL;
    root = Insert(root,5); root = Insert(root,10);
    root = Insert(root,3); root = Insert(root,4);
    root = Insert(root,1); root = Insert(root,11);

    // Deleting node with value 5, change this value to test other cases
    root = Delete(root,5);

    //Print Nodes in Inorder
    cout<<"Inorder: ";
    inorder(root);
    cout<<"\n";
}
