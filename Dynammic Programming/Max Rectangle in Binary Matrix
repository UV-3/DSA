int maxArea(vector<int>&h){
    int n=h.size();
    int ans=0;
    stack<pair<int, int>>st;
    for(int i=0;i<n;i++){
        int start=i;
        while(!st.empty() && st.top().second>h[i]){
            pair<int,int>p=st.top();
            st.pop();
            ans=max(ans,p.second*(i-p.first));
            start=p.first;
        }
        st.push({start,h[i]});
    }
    while(!st.empty()){
        pair<int, int>p=st.top();
        st.pop();
        ans=max(ans,(n-p.first)*p.second);
    }
    return ans;
}
int Solution::maximalRectangle(vector<vector<int> > &A) {
    int n=A.size();
    int m=A[0].size();
    int fnl=0;
    vector<int>heights(m,0);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(A[i][j]==1){
                heights[j]++;
            }
            else{
                heights[j]=0;
            }
        }
        fnl=max(fnl,maxArea(heights));
    }
    return fnl;
}
