string Solution::longestPalindrome(string s) {
    string res="";
    int ans=0;
    int n=s.size();
    for(int mid=0;mid<n;mid++){
        for(int x=0;mid-x>=0 && mid+x<n ;x++){
            if(s[mid-x]!=s[mid+x]){
                break;
            }
            int len=2*x+1;
            if(len>ans){
                ans=len;
                res=s.substr(mid-x,len);
            }
        }
    }
    for(int mid=0;mid<n-1;mid++){
        for(int x=1;mid-x+1>=0 && mid+x<n;x++){
            if(s[mid-x+1]!=s[mid+x]){
                break;
            }
            int len=2*x;
            if(len>ans){
                ans=len;
                res=s.substr(mid-x+1,len);
            }
        }
    }
    return res;
}
O(n*n) with O(n) space
