int Solution::lis(const vector<int> &A) {
    int n=A.size();
    vector<int>dp(n,1);
    for(int i=1;i<n;i++){
        for(int j=0;j<i;j++){
            if(A[j]<A[i]){
                dp[i]=max(dp[i],dp[j]+1);
            }
        }
    }
    int ans=1;
    for(int i=0;i<n;i++){
        ans= max(ans,dp[i]);
    }
    return ans;
}


// O(nlogn) solution
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int>res;
        for(int i=0;i<n;i++){
            auto it= lower_bound(res.begin(),res.end(),nums[i]);
            if(it==res.end()){
                res.push_back(nums[i]);
            }
            else{
                *it=nums[i];
            }
        }
        return res.size();
    }
};
